const assert = require('assert');
const ganache = require('ganache-cli'); //local ethereum network
const Web3 = require('web3'); //uper casse because we are requiring the constructor of Web3, 'web3 = new Web3()'
const compilationOutput = require('../compile'); //get the modules from compile.js and destructure it!
const web3  = new Web3(ganache.provider()); //create the instance and give the provider

let accounts;
let adminAccount; //the insurance carrier deploying the contract
let brokerAccount;  // the address of an authorized broker
let unauthorizedAccount;
let policiesContract; 

//rinkeby.infura.io/v3/c8ec1de8ac534efcadab78ab0d0619ed
beforeEach(async () => {
    
    // Get a list of all accounts, use one of them to deploy the contract. Using the eth module of the web3 
    accounts = await web3.eth.getAccounts();
    adminAccount = accounts[1];
    brokerAccount = accounts[0];
    unauthorizedAccount = accounts[2];

    //console.log(JSON.stringify(compilationOutput.abi));

    //create a contract using the ABI generated by the ABI
    policiesContract = await new web3.eth.Contract(compilationOutput.abi)
        .deploy( { data : compilationOutput.evm.bytecode.object, arguments : [[brokerAccount]]}) //use the contract bytecode and the send args
        .send( {  from : adminAccount, gas: '2999999'});
});

describe('Deploy policy factory', () => {
    it('is able to deploy', () => {
        assert.ok(policiesContract.options.address); //make sure not undefined
    });

    it('auhtorized broker is able to create draft policy', async () => {
        let transactionInfo = await policiesContract.methods.createDraftPolicy("mario", "mendez", "333 main", 200).send({ from: brokerAccount, gas: '1900000'});
        //console.log(JSON.stringify(transactionInfo));
    });

    it('unauthorized account can NOT create a draft policy', async () => {
        let fail = async () => {
            await policiesContract.methods.createDraftPolicy("mario", "mendez", "333 main", 200).send({ from: unauthorizedAccount, gas: '1900000'});
        }
        try {
        var resp = await fail(); //call the fail function
        }
        catch(err) {
            assert.throws(function () { throw new Error(err.Error) }, Error, "VM Exception while processing transaction: revert The address carrying out the operation must be authorized");
            //get the error thrown, throw it again, and make sure its the same one we expecting
        }
    });

    it('is able to create and retrieve a policy', async () => {
        //create the draft policy
        let name = "Mario";
        let lastName = "Mendez"
        let address = "333 main";
        let premium = 200;

        let transactionInfo = await policiesContract.methods.createDraftPolicy(name, lastName, address, premium).send({ from: brokerAccount, gas: '1900000'});
        let draftPolicyId = transactionInfo.events.draftCreated.returnValues.draftPolicyId; //retrieve the id from the event log

        let retrievedPolicy = await policiesContract.methods.getDraftPolicy(draftPolicyId).call(); //check the retrieved works
        assert.equal(address, retrievedPolicy.customerAddress);
        assert.equal(premium, retrievedPolicy.premium);    
    });

    it('it is able to get all draft policy ids', async() => {

        let firstTransactionInfo = await policiesContract.methods.createDraftPolicy("mario", "qiu", "address", 200).send({ from: brokerAccount, gas: '1900000'});
        let firstId = firstTransactionInfo.events.draftCreated.returnValues.draftPolicyId;
        //console.log("First id is ", firstId);

        let secondTransactionInfo = await policiesContract.methods.createDraftPolicy("yolo", "sxa", "rer", 100).send({ from: brokerAccount, gas: '1900000'});
        let secondId = secondTransactionInfo.events.draftCreated.returnValues.draftPolicyId;
        //console.log("Second id is ", secondId);

        let thirdTransactionInfo = await policiesContract.methods.createDraftPolicy("papaya", "daskda", "utut", 300).send({ from: brokerAccount, gas: '1900000'});
        let thirdId = thirdTransactionInfo.events.draftCreated.returnValues.draftPolicyId;
        //console.log("Third id is ", thirdId);

        let idsList = await policiesContract.methods.getDraftPolicyIds(3).call();
        //console.log(idsList);

        assert(idsList.includes(firstId));
        assert(idsList.includes(secondId));
        assert(idsList.includes(thirdId));
    });

    it('it is able to handle getting more than exisitng ids', async() => {

        let firstTransactionInfo = await policiesContract.methods.createDraftPolicy("mario", "qiu", "address", 200).send({ from: brokerAccount, gas: '1900000'});
        let firstId = firstTransactionInfo.events.draftCreated.returnValues.draftPolicyId;
        //console.log("First id is ", firstId);

        let secondTransactionInfo = await policiesContract.methods.createDraftPolicy("yolo", "sxa", "rer", 100).send({ from: brokerAccount, gas: '1900000'});
        let secondId = secondTransactionInfo.events.draftCreated.returnValues.draftPolicyId;
        //console.log("Second id is ", secondId);

        let thirdTransactionInfo = await policiesContract.methods.createDraftPolicy("papaya", "daskda", "utut", 300).send({ from: brokerAccount, gas: '1900000'});
        let thirdId = thirdTransactionInfo.events.draftCreated.returnValues.draftPolicyId;
        //console.log("Third id is ", thirdId);

        let idsList = await policiesContract.methods.getDraftPolicyIds(4).call();

        assert(idsList.length == 3);
        assert(idsList.includes(firstId));
        assert(idsList.includes(secondId));
        assert(idsList.includes(thirdId));

    });

    it('it is able to get all draft policy ids', async() => {

        let firstTransactionInfo = await policiesContract.methods.createDraftPolicy("mario", "qiu", "address", 200).send({ from: brokerAccount, gas: '1900000'});
        let firstId = firstTransactionInfo.events.draftCreated.returnValues.draftPolicyId;
        //console.log("First id is ", firstId);

        let secondTransactionInfo = await policiesContract.methods.createDraftPolicy("yolo", "sxa", "rer", 100).send({ from: brokerAccount, gas: '1900000'});
        let secondId = secondTransactionInfo.events.draftCreated.returnValues.draftPolicyId;
        //console.log("Second id is ", secondId);

        let thirdTransactionInfo = await policiesContract.methods.createDraftPolicy("papaya", "daskda", "utut", 300).send({ from: brokerAccount, gas: '1900000'});
        let thirdId = thirdTransactionInfo.events.draftCreated.returnValues.draftPolicyId;
        //console.log("Third id is ", thirdId);

        let idsList = await policiesContract.methods.getDraftPolicyIds(3).call();
        //console.log(idsList);

        assert(idsList.includes(firstId));
        assert(idsList.includes(secondId));
        assert(idsList.includes(thirdId));


    });

    it('retrieveing draft policies ids fails when getting params < 1', async () => {
        let fail = async () => {
            await policiesContract.methods.getDraftPolicyIds(-1).call();
        }
        try {
        var resp = await fail(); //call the fail function
        }
        catch(err) {
            assert.throws(function () { throw new Error(err.Error) }, Error, "Parameter must be greater than 0");
        }

        let secondFail = async () => {
            await policiesContract.methods.getDraftPolicyIds(0).call();
        }
        try {
        var resp = await secondFail(); //call the fail function
        }
        catch(err) {
            assert.throws(function () { throw new Error(err.Error) }, Error, "Parameter must be greater than 0");
        }
    });

    


});





